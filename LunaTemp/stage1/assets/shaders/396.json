{"id":396,"assetBundleId":-1,"data":[[],"Simple Toon\/SToon Default","7cd5de0b884b14f88ab763ef465e1799",["DIRECTIONAL","SHADOWS_SCREEN","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTPROBE_SH","VERTEXLIGHT_ON","SPOT","DIRECTIONAL_COOKIE","POINT","POINT_COOKIE","SHADOWS_DEPTH","SHADOWS_SHADOWMASK","DYNAMICLIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","SHADOWS_SOFT","SHADOWS_CUBE"],[[0,0,"DirectLight",4,0,[4,null],[1,null],[2,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["LIGHTMODE","FORWARDBASE"],["SHADOWSUPPORT","true"],["RENDERTYPE","Opaque"]],["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SHADOWMASK","DYNAMICLIGHTMAP_ON","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","VERTEXLIGHT_ON"],[[["DIRECTIONAL"],0],[["DIRECTIONAL","LIGHTPROBE_SH"],0],[["DIRECTIONAL","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","SHADOWS_SCREEN"],0],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","LIGHTMAP_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","LIGHTPROBE_SH"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","VERTEXLIGHT_ON","DIRLIGHTMAP_COMBINED","DYNAMICLIGHTMAP_ON","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0]],[[0,0,["DIRECTIONAL"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nfloat u_xlat6;\nbool u_xlatb6;\nfloat u_xlat8;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat14;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat16_1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat4.x = max(_Offset, -1.0);\n    u_xlat4.x = min(u_xlat4.x, 1.0);\n    u_xlat8 = u_xlat4.x + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4.x = u_xlat4.x + 1.0;\n    u_xlat4.x = u_xlat8 \/ u_xlat4.x;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat8 = floor(_Steps);\n    u_xlat8 = float(1.0) \/ u_xlat8;\n    u_xlat8 = (_Segmented != 0) ? u_xlat8 : 1.0;\n    u_xlat12 = u_xlat4.x \/ u_xlat8;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8 + (-u_xlat8);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8 * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4.x = u_xlat4.x + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4.x \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4.x = u_xlat4.x * u_xlat10;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4.x * -2.0 + 3.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * u_xlat14;\n    u_xlat4.x = (u_xlatb2) ? 0.0 : u_xlat4.x;\n    u_xlat2.x = (-u_xlat4.x) + u_xlat10;\n    u_xlat4.x = u_xlat6 * u_xlat2.x + u_xlat4.x;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8 * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat2.x;\n    u_xlat4.x = (-u_xlat4.x) * u_xlat8 + u_xlat12;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat8 = u_xlat4.x + (-_MinLight);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat2.x = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat8 = u_xlat8 \/ u_xlat2.x;\n    u_xlat2.x = u_xlat12 + (-_MinLight);\n    u_xlat8 = u_xlat8 * u_xlat2.x + _MinLight;\n    u_xlat4.x = u_xlat2.x * u_xlat4.x + _MinLight;\n    u_xlat8 = max(u_xlat8, _MinLight);\n    u_xlat8 = min(u_xlat12, u_xlat8);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4.x = u_xlat4.x * u_xlat2.y;\n    u_xlat4.x = u_xlat2.x * u_xlat8 + u_xlat4.x;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = u_xlat4.xxx * u_xlat2.xyz;\n    u_xlat4.xyz = (-u_xlat4.xxx) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat2.x = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat6 = (-_ShnSmooth) + 1.0;\n    u_xlat10 = _ShnRange + _ShnRange;\n    u_xlat14 = u_xlat10 * u_xlat6 + (-u_xlat10);\n    u_xlat6 = u_xlat6 * u_xlat10;\n    u_xlatb6 = u_xlat6==u_xlat10;\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat2.x = u_xlat10 * u_xlat2.x;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = u_xlat2.x * -2.0 + 3.0;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * u_xlat10;\n    u_xlat2.x = (u_xlatb6) ? 1.0 : u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;\n    u_xlatb2 = 0.0<_LightColor0.w;\n    u_xlat0.w = 1.0;\n    u_xlat0 = bool(u_xlatb2) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nfloat u_xlat6;\nbool u_xlatb6;\nfloat u_xlat8;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat14;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat16_1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat4.x = max(_Offset, -1.0);\n    u_xlat4.x = min(u_xlat4.x, 1.0);\n    u_xlat8 = u_xlat4.x + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4.x = u_xlat4.x + 1.0;\n    u_xlat4.x = u_xlat8 \/ u_xlat4.x;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat8 = floor(_Steps);\n    u_xlat8 = float(1.0) \/ u_xlat8;\n    u_xlat8 = (_Segmented != 0) ? u_xlat8 : 1.0;\n    u_xlat12 = u_xlat4.x \/ u_xlat8;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8 + (-u_xlat8);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8 * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4.x = u_xlat4.x + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4.x \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4.x = u_xlat4.x * u_xlat10;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4.x * -2.0 + 3.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * u_xlat14;\n    u_xlat4.x = (u_xlatb2) ? 0.0 : u_xlat4.x;\n    u_xlat2.x = (-u_xlat4.x) + u_xlat10;\n    u_xlat4.x = u_xlat6 * u_xlat2.x + u_xlat4.x;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8 * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat2.x;\n    u_xlat4.x = (-u_xlat4.x) * u_xlat8 + u_xlat12;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat8 = u_xlat4.x + (-_MinLight);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat2.x = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat8 = u_xlat8 \/ u_xlat2.x;\n    u_xlat2.x = u_xlat12 + (-_MinLight);\n    u_xlat8 = u_xlat8 * u_xlat2.x + _MinLight;\n    u_xlat4.x = u_xlat2.x * u_xlat4.x + _MinLight;\n    u_xlat8 = max(u_xlat8, _MinLight);\n    u_xlat8 = min(u_xlat12, u_xlat8);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4.x = u_xlat4.x * u_xlat2.y;\n    u_xlat4.x = u_xlat2.x * u_xlat8 + u_xlat4.x;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = u_xlat4.xxx * u_xlat2.xyz;\n    u_xlat4.xyz = (-u_xlat4.xxx) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat2.x = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat6 = (-_ShnSmooth) + 1.0;\n    u_xlat10 = _ShnRange + _ShnRange;\n    u_xlat14 = u_xlat10 * u_xlat6 + (-u_xlat10);\n    u_xlat6 = u_xlat6 * u_xlat10;\n    u_xlatb6 = u_xlat6==u_xlat10;\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat2.x = u_xlat10 * u_xlat2.x;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = u_xlat2.x * -2.0 + 3.0;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * u_xlat10;\n    u_xlat2.x = (u_xlatb6) ? 1.0 : u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;\n    u_xlatb2 = 0.0<_LightColor0.w;\n    u_xlat0.w = 1.0;\n    u_xlat0 = bool(u_xlatb2) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0],[0,0,["DIRECTIONAL","SHADOWS_SCREEN"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.w = u_xlat1.x * 0.5;\n    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;\n    vs_TEXCOORD1.zw = u_xlat0.zw;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tint _ShnOverlap;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nfloat u_xlat4;\nfloat u_xlat6;\nvec2 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat14;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat16_1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat4 = max(_Offset, -1.0);\n    u_xlat4 = min(u_xlat4, 1.0);\n    u_xlat8.x = u_xlat4 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4 = u_xlat4 + 1.0;\n    u_xlat4 = u_xlat8.x \/ u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.x = floor(_Steps);\n    u_xlat8.x = float(1.0) \/ u_xlat8.x;\n    u_xlat8.x = (_Segmented != 0) ? u_xlat8.x : 1.0;\n    u_xlat12 = u_xlat4 \/ u_xlat8.x;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8.x + (-u_xlat8.x);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8.x * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4 = u_xlat4 + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4 \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat10;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb2) ? 0.0 : u_xlat4;\n    u_xlat2.x = (-u_xlat4) + u_xlat10;\n    u_xlat4 = u_xlat6 * u_xlat2.x + u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8.x * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat4 = (-u_xlat4) * u_xlat8.x + u_xlat12;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD1.xy \/ vs_TEXCOORD1.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat12 = u_xlat10_8;\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat8.x = (-u_xlat10_8) + 1.0;\n    u_xlat2.x = u_xlat4 * u_xlat12 + (-_MinLight);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat4 = u_xlat12 * u_xlat4;\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat2.x = u_xlat2.x \/ u_xlat6;\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat2.x = u_xlat2.x * u_xlat6 + _MinLight;\n    u_xlat4 = u_xlat6 * u_xlat4 + _MinLight;\n    u_xlat2.x = max(u_xlat2.x, _MinLight);\n    u_xlat12 = min(u_xlat12, u_xlat2.x);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.y;\n    u_xlat4 = u_xlat2.x * u_xlat12 + u_xlat4;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat2.xyz;\n    u_xlat2.xyz = (-vec3(u_xlat4)) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat4 = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat12 = (-_ShnSmooth) + 1.0;\n    u_xlat14 = _ShnRange + _ShnRange;\n    u_xlat15 = u_xlat14 * u_xlat12 + (-u_xlat14);\n    u_xlat12 = u_xlat12 * u_xlat14;\n    u_xlatb12 = u_xlat12==u_xlat14;\n    u_xlat14 = float(1.0) \/ u_xlat15;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb12) ? 1.0 : u_xlat4;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat4 = (_ShnOverlap != 0) ? 0.0 : 1.0;\n    u_xlat4 = (-u_xlat8.x) * u_xlat4 + 1.0;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;\n    u_xlatb2 = 0.0<_LightColor0.w;\n    u_xlat0.w = 1.0;\n    u_xlat0 = bool(u_xlatb2) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0],[0,0,["DIRECTIONAL","VERTEXLIGHT_ON"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nfloat u_xlat6;\nbool u_xlatb6;\nfloat u_xlat8;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat14;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat16_1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat4.x = max(_Offset, -1.0);\n    u_xlat4.x = min(u_xlat4.x, 1.0);\n    u_xlat8 = u_xlat4.x + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4.x = u_xlat4.x + 1.0;\n    u_xlat4.x = u_xlat8 \/ u_xlat4.x;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat8 = floor(_Steps);\n    u_xlat8 = float(1.0) \/ u_xlat8;\n    u_xlat8 = (_Segmented != 0) ? u_xlat8 : 1.0;\n    u_xlat12 = u_xlat4.x \/ u_xlat8;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8 + (-u_xlat8);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8 * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4.x = u_xlat4.x + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4.x \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4.x = u_xlat4.x * u_xlat10;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4.x * -2.0 + 3.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * u_xlat14;\n    u_xlat4.x = (u_xlatb2) ? 0.0 : u_xlat4.x;\n    u_xlat2.x = (-u_xlat4.x) + u_xlat10;\n    u_xlat4.x = u_xlat6 * u_xlat2.x + u_xlat4.x;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8 * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat2.x;\n    u_xlat4.x = (-u_xlat4.x) * u_xlat8 + u_xlat12;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat8 = u_xlat4.x + (-_MinLight);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat2.x = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat8 = u_xlat8 \/ u_xlat2.x;\n    u_xlat2.x = u_xlat12 + (-_MinLight);\n    u_xlat8 = u_xlat8 * u_xlat2.x + _MinLight;\n    u_xlat4.x = u_xlat2.x * u_xlat4.x + _MinLight;\n    u_xlat8 = max(u_xlat8, _MinLight);\n    u_xlat8 = min(u_xlat12, u_xlat8);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4.x = u_xlat4.x * u_xlat2.y;\n    u_xlat4.x = u_xlat2.x * u_xlat8 + u_xlat4.x;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = u_xlat4.xxx * u_xlat2.xyz;\n    u_xlat4.xyz = (-u_xlat4.xxx) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat2.x = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat6 = (-_ShnSmooth) + 1.0;\n    u_xlat10 = _ShnRange + _ShnRange;\n    u_xlat14 = u_xlat10 * u_xlat6 + (-u_xlat10);\n    u_xlat6 = u_xlat6 * u_xlat10;\n    u_xlatb6 = u_xlat6==u_xlat10;\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat2.x = u_xlat10 * u_xlat2.x;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = u_xlat2.x * -2.0 + 3.0;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * u_xlat10;\n    u_xlat2.x = (u_xlatb6) ? 1.0 : u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;\n    u_xlatb2 = 0.0<_LightColor0.w;\n    u_xlat0.w = 1.0;\n    u_xlat0 = bool(u_xlatb2) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.w = u_xlat1.x * 0.5;\n    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;\n    vs_TEXCOORD1.zw = u_xlat0.zw;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tint _ShnOverlap;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nfloat u_xlat4;\nfloat u_xlat6;\nvec2 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat14;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat16_1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat4 = max(_Offset, -1.0);\n    u_xlat4 = min(u_xlat4, 1.0);\n    u_xlat8.x = u_xlat4 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4 = u_xlat4 + 1.0;\n    u_xlat4 = u_xlat8.x \/ u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.x = floor(_Steps);\n    u_xlat8.x = float(1.0) \/ u_xlat8.x;\n    u_xlat8.x = (_Segmented != 0) ? u_xlat8.x : 1.0;\n    u_xlat12 = u_xlat4 \/ u_xlat8.x;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8.x + (-u_xlat8.x);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8.x * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4 = u_xlat4 + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4 \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat10;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb2) ? 0.0 : u_xlat4;\n    u_xlat2.x = (-u_xlat4) + u_xlat10;\n    u_xlat4 = u_xlat6 * u_xlat2.x + u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8.x * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat4 = (-u_xlat4) * u_xlat8.x + u_xlat12;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD1.xy \/ vs_TEXCOORD1.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat12 = u_xlat10_8;\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat8.x = (-u_xlat10_8) + 1.0;\n    u_xlat2.x = u_xlat4 * u_xlat12 + (-_MinLight);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat4 = u_xlat12 * u_xlat4;\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat2.x = u_xlat2.x \/ u_xlat6;\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat2.x = u_xlat2.x * u_xlat6 + _MinLight;\n    u_xlat4 = u_xlat6 * u_xlat4 + _MinLight;\n    u_xlat2.x = max(u_xlat2.x, _MinLight);\n    u_xlat12 = min(u_xlat12, u_xlat2.x);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.y;\n    u_xlat4 = u_xlat2.x * u_xlat12 + u_xlat4;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat2.xyz;\n    u_xlat2.xyz = (-vec3(u_xlat4)) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat4 = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat12 = (-_ShnSmooth) + 1.0;\n    u_xlat14 = _ShnRange + _ShnRange;\n    u_xlat15 = u_xlat14 * u_xlat12 + (-u_xlat14);\n    u_xlat12 = u_xlat12 * u_xlat14;\n    u_xlatb12 = u_xlat12==u_xlat14;\n    u_xlat14 = float(1.0) \/ u_xlat15;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb12) ? 1.0 : u_xlat4;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat4 = (_ShnOverlap != 0) ? 0.0 : 1.0;\n    u_xlat4 = (-u_xlat8.x) * u_xlat4 + 1.0;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;\n    u_xlatb2 = 0.0<_LightColor0.w;\n    u_xlat0.w = 1.0;\n    u_xlat0 = bool(u_xlatb2) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","VERTEXLIGHT_ON"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nfloat u_xlat6;\nbool u_xlatb6;\nfloat u_xlat8;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat14;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat16_1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat4.x = max(_Offset, -1.0);\n    u_xlat4.x = min(u_xlat4.x, 1.0);\n    u_xlat8 = u_xlat4.x + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4.x = u_xlat4.x + 1.0;\n    u_xlat4.x = u_xlat8 \/ u_xlat4.x;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat8 = floor(_Steps);\n    u_xlat8 = float(1.0) \/ u_xlat8;\n    u_xlat8 = (_Segmented != 0) ? u_xlat8 : 1.0;\n    u_xlat12 = u_xlat4.x \/ u_xlat8;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8 + (-u_xlat8);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8 * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4.x = u_xlat4.x + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4.x \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4.x = u_xlat4.x * u_xlat10;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4.x * -2.0 + 3.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * u_xlat14;\n    u_xlat4.x = (u_xlatb2) ? 0.0 : u_xlat4.x;\n    u_xlat2.x = (-u_xlat4.x) + u_xlat10;\n    u_xlat4.x = u_xlat6 * u_xlat2.x + u_xlat4.x;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8 * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat2.x;\n    u_xlat4.x = (-u_xlat4.x) * u_xlat8 + u_xlat12;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat8 = u_xlat4.x + (-_MinLight);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat2.x = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat8 = u_xlat8 \/ u_xlat2.x;\n    u_xlat2.x = u_xlat12 + (-_MinLight);\n    u_xlat8 = u_xlat8 * u_xlat2.x + _MinLight;\n    u_xlat4.x = u_xlat2.x * u_xlat4.x + _MinLight;\n    u_xlat8 = max(u_xlat8, _MinLight);\n    u_xlat8 = min(u_xlat12, u_xlat8);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4.x = u_xlat4.x * u_xlat2.y;\n    u_xlat4.x = u_xlat2.x * u_xlat8 + u_xlat4.x;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = u_xlat4.xxx * u_xlat2.xyz;\n    u_xlat4.xyz = (-u_xlat4.xxx) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat2.x = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat6 = (-_ShnSmooth) + 1.0;\n    u_xlat10 = _ShnRange + _ShnRange;\n    u_xlat14 = u_xlat10 * u_xlat6 + (-u_xlat10);\n    u_xlat6 = u_xlat6 * u_xlat10;\n    u_xlatb6 = u_xlat6==u_xlat10;\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat2.x = u_xlat10 * u_xlat2.x;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = u_xlat2.x * -2.0 + 3.0;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * u_xlat10;\n    u_xlat2.x = (u_xlatb6) ? 1.0 : u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;\n    u_xlatb2 = 0.0<_LightColor0.w;\n    u_xlat0.w = 1.0;\n    u_xlat0 = bool(u_xlatb2) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0],[0,0,["DIRECTIONAL","SHADOWS_SCREEN","VERTEXLIGHT_ON"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.w = u_xlat1.x * 0.5;\n    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;\n    vs_TEXCOORD1.zw = u_xlat0.zw;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tint _ShnOverlap;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nfloat u_xlat4;\nfloat u_xlat6;\nvec2 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat14;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat16_1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat4 = max(_Offset, -1.0);\n    u_xlat4 = min(u_xlat4, 1.0);\n    u_xlat8.x = u_xlat4 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4 = u_xlat4 + 1.0;\n    u_xlat4 = u_xlat8.x \/ u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.x = floor(_Steps);\n    u_xlat8.x = float(1.0) \/ u_xlat8.x;\n    u_xlat8.x = (_Segmented != 0) ? u_xlat8.x : 1.0;\n    u_xlat12 = u_xlat4 \/ u_xlat8.x;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8.x + (-u_xlat8.x);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8.x * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4 = u_xlat4 + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4 \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat10;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb2) ? 0.0 : u_xlat4;\n    u_xlat2.x = (-u_xlat4) + u_xlat10;\n    u_xlat4 = u_xlat6 * u_xlat2.x + u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8.x * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat4 = (-u_xlat4) * u_xlat8.x + u_xlat12;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD1.xy \/ vs_TEXCOORD1.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat12 = u_xlat10_8;\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat8.x = (-u_xlat10_8) + 1.0;\n    u_xlat2.x = u_xlat4 * u_xlat12 + (-_MinLight);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat4 = u_xlat12 * u_xlat4;\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat2.x = u_xlat2.x \/ u_xlat6;\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat2.x = u_xlat2.x * u_xlat6 + _MinLight;\n    u_xlat4 = u_xlat6 * u_xlat4 + _MinLight;\n    u_xlat2.x = max(u_xlat2.x, _MinLight);\n    u_xlat12 = min(u_xlat12, u_xlat2.x);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.y;\n    u_xlat4 = u_xlat2.x * u_xlat12 + u_xlat4;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat2.xyz;\n    u_xlat2.xyz = (-vec3(u_xlat4)) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat4 = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat12 = (-_ShnSmooth) + 1.0;\n    u_xlat14 = _ShnRange + _ShnRange;\n    u_xlat15 = u_xlat14 * u_xlat12 + (-u_xlat14);\n    u_xlat12 = u_xlat12 * u_xlat14;\n    u_xlatb12 = u_xlat12==u_xlat14;\n    u_xlat14 = float(1.0) \/ u_xlat15;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb12) ? 1.0 : u_xlat4;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat4 = (_ShnOverlap != 0) ? 0.0 : 1.0;\n    u_xlat4 = (-u_xlat8.x) * u_xlat4 + 1.0;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;\n    u_xlatb2 = 0.0<_LightColor0.w;\n    u_xlat0.w = 1.0;\n    u_xlat0 = bool(u_xlatb2) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0],[0,0,["DIRECTIONAL","LIGHTPROBE_SH","SHADOWS_SCREEN","VERTEXLIGHT_ON"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    u_xlat1.x = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.w = u_xlat1.x * 0.5;\n    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;\n    vs_TEXCOORD1.zw = u_xlat0.zw;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_NORMAL0.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tint _ShnOverlap;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nfloat u_xlat4;\nfloat u_xlat6;\nvec2 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat14;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_NORMAL0.xyz;\n    u_xlat16_1.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _WorldSpaceLightPos0.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat4 = max(_Offset, -1.0);\n    u_xlat4 = min(u_xlat4, 1.0);\n    u_xlat8.x = u_xlat4 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4 = u_xlat4 + 1.0;\n    u_xlat4 = u_xlat8.x \/ u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.x = floor(_Steps);\n    u_xlat8.x = float(1.0) \/ u_xlat8.x;\n    u_xlat8.x = (_Segmented != 0) ? u_xlat8.x : 1.0;\n    u_xlat12 = u_xlat4 \/ u_xlat8.x;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8.x + (-u_xlat8.x);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8.x * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4 = u_xlat4 + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4 \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat10;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb2) ? 0.0 : u_xlat4;\n    u_xlat2.x = (-u_xlat4) + u_xlat10;\n    u_xlat4 = u_xlat6 * u_xlat2.x + u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8.x * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat4 = (-u_xlat4) * u_xlat8.x + u_xlat12;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD1.xy \/ vs_TEXCOORD1.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat12 = u_xlat10_8;\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat8.x = (-u_xlat10_8) + 1.0;\n    u_xlat2.x = u_xlat4 * u_xlat12 + (-_MinLight);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat4 = u_xlat12 * u_xlat4;\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat2.x = u_xlat2.x \/ u_xlat6;\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat2.x = u_xlat2.x * u_xlat6 + _MinLight;\n    u_xlat4 = u_xlat6 * u_xlat4 + _MinLight;\n    u_xlat2.x = max(u_xlat2.x, _MinLight);\n    u_xlat12 = min(u_xlat12, u_xlat2.x);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.y;\n    u_xlat4 = u_xlat2.x * u_xlat12 + u_xlat4;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat2.xyz;\n    u_xlat2.xyz = (-vec3(u_xlat4)) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat4 = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat12 = (-_ShnSmooth) + 1.0;\n    u_xlat14 = _ShnRange + _ShnRange;\n    u_xlat15 = u_xlat14 * u_xlat12 + (-u_xlat14);\n    u_xlat12 = u_xlat12 * u_xlat14;\n    u_xlatb12 = u_xlat12==u_xlat14;\n    u_xlat14 = float(1.0) \/ u_xlat15;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb12) ? 1.0 : u_xlat4;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat4 = (_ShnOverlap != 0) ? 0.0 : 1.0;\n    u_xlat4 = (-u_xlat8.x) * u_xlat4 + 1.0;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;\n    u_xlatb2 = 0.0<_LightColor0.w;\n    u_xlat0.w = 1.0;\n    u_xlat0 = bool(u_xlatb2) ? u_xlat0 : vec4(0.0, 0.0, 0.0, 0.0);\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n",0]],[],0],[1,0,"SpotLight",5,0,[4,null],[1,null],[2,null],[[1,null],[0,null],[4,null]],[[1,null],[0,null],[4,null]],[15,null],[0,null],[0,null],[0,null],[255,null],[255,null],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[[0,null],[0,null],[0,null],[8,null]],[["LIGHTMODE","FORWARDADD"],["SHADOWSUPPORT","true"],["RENDERTYPE","Opaque"]],["POINT","DIRECTIONAL","SPOT","POINT_COOKIE","DIRECTIONAL_COOKIE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING","SHADOWS_DEPTH","SHADOWS_SOFT","SHADOWS_SCREEN","SHADOWS_CUBE"],[[["POINT"],0],[["DIRECTIONAL"],0],[["SPOT"],0],[["POINT_COOKIE"],0],[["DIRECTIONAL_COOKIE"],0],[["POINT","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","SHADOWS_SHADOWMASK"],0],[["SPOT","SHADOWS_SHADOWMASK"],0],[["POINT_COOKIE","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SHADOWMASK"],0],[["POINT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT"],0],[["SPOT","SHADOWS_DEPTH","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SHADOWMASK"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","SHADOWS_SHADOWMASK"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["SPOT","SHADOWS_DEPTH","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SCREEN"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN"],0],[["DIRECTIONAL","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","SHADOWS_SHADOWMASK"],0],[["DIRECTIONAL","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["DIRECTIONAL_COOKIE","SHADOWS_SCREEN","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT"],0],[["POINT","SHADOWS_CUBE","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SHADOWMASK"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT"],0],[["POINT_COOKIE","SHADOWS_CUBE","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SHADOWMASK"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0],[["POINT_COOKIE","SHADOWS_CUBE","SHADOWS_SOFT","SHADOWS_SHADOWMASK","LIGHTMAP_SHADOW_MIXING"],0]],[[1,0,["POINT"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    vs_TEXCOORD0.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    vs_TEXCOORDSS0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    vs_WORLD0.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tint _ShnOverlap;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform highp sampler2D _LightTexture0;\nuniform lowp sampler2D _MainTex;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nfloat u_xlat4;\nfloat u_xlat6;\nfloat u_xlat8;\nfloat u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat14;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_WORLD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * vs_NORMAL0.xyz;\n    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);\n    u_xlat4 = max(_Offset, -1.0);\n    u_xlat4 = min(u_xlat4, 1.0);\n    u_xlat8 = u_xlat4 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4 = u_xlat4 + 1.0;\n    u_xlat4 = u_xlat8 \/ u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8 = floor(_Steps);\n    u_xlat8 = float(1.0) \/ u_xlat8;\n    u_xlat8 = (_Segmented != 0) ? u_xlat8 : 1.0;\n    u_xlat12 = u_xlat4 \/ u_xlat8;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8 + (-u_xlat8);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8 * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4 = u_xlat4 + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4 \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat10;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb2) ? 0.0 : u_xlat4;\n    u_xlat2.x = (-u_xlat4) + u_xlat10;\n    u_xlat4 = u_xlat6 * u_xlat2.x + u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8 * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat4 = (-u_xlat4) * u_xlat8 + u_xlat12;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat8 = texture2D(_LightTexture0, vec2(u_xlat8)).x;\n    u_xlat12 = u_xlat8;\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat8 = (-u_xlat8) + 1.0;\n    u_xlat2.x = u_xlat4 * u_xlat12 + (-_MinLight);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat4 = u_xlat12 * u_xlat4;\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat2.x = u_xlat2.x \/ u_xlat6;\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat2.x = u_xlat2.x * u_xlat6 + _MinLight;\n    u_xlat4 = u_xlat6 * u_xlat4 + _MinLight;\n    u_xlat2.x = max(u_xlat2.x, _MinLight);\n    u_xlat12 = min(u_xlat12, u_xlat2.x);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.y;\n    u_xlat4 = u_xlat2.x * u_xlat12 + u_xlat4;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORDSS0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat2.xyz;\n    u_xlat2.xyz = (-vec3(u_xlat4)) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat4 = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat12 = (-_ShnSmooth) + 1.0;\n    u_xlat14 = _ShnRange + _ShnRange;\n    u_xlat15 = u_xlat14 * u_xlat12 + (-u_xlat14);\n    u_xlat12 = u_xlat12 * u_xlat14;\n    u_xlatb12 = u_xlat12==u_xlat14;\n    u_xlat14 = float(1.0) \/ u_xlat15;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb12) ? 1.0 : u_xlat4;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat4 = (_ShnOverlap != 0) ? 0.0 : 1.0;\n    u_xlat4 = (-u_xlat8) * u_xlat4 + 1.0;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0],[1,0,["DIRECTIONAL"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    vs_TEXCOORDSS0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    vs_WORLD0.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nvec3 u_xlat4;\nfloat u_xlat6;\nbool u_xlatb6;\nfloat u_xlat8;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat14;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_WORLD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * vs_NORMAL0.xyz;\n    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);\n    u_xlat4.x = max(_Offset, -1.0);\n    u_xlat4.x = min(u_xlat4.x, 1.0);\n    u_xlat8 = u_xlat4.x + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4.x = u_xlat4.x + 1.0;\n    u_xlat4.x = u_xlat8 \/ u_xlat4.x;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat8 = floor(_Steps);\n    u_xlat8 = float(1.0) \/ u_xlat8;\n    u_xlat8 = (_Segmented != 0) ? u_xlat8 : 1.0;\n    u_xlat12 = u_xlat4.x \/ u_xlat8;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8 + (-u_xlat8);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8 * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4.x = u_xlat4.x + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4.x \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4.x = u_xlat4.x * u_xlat10;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4.x * -2.0 + 3.0;\n    u_xlat4.x = u_xlat4.x * u_xlat4.x;\n    u_xlat4.x = u_xlat4.x * u_xlat14;\n    u_xlat4.x = (u_xlatb2) ? 0.0 : u_xlat4.x;\n    u_xlat2.x = (-u_xlat4.x) + u_xlat10;\n    u_xlat4.x = u_xlat6 * u_xlat2.x + u_xlat4.x;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8 * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4.x = u_xlat4.x * u_xlat2.x;\n    u_xlat4.x = (-u_xlat4.x) * u_xlat8 + u_xlat12;\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat8 = u_xlat4.x + (-_MinLight);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat2.x = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat8 = u_xlat8 \/ u_xlat2.x;\n    u_xlat2.x = u_xlat12 + (-_MinLight);\n    u_xlat8 = u_xlat8 * u_xlat2.x + _MinLight;\n    u_xlat4.x = u_xlat2.x * u_xlat4.x + _MinLight;\n    u_xlat8 = max(u_xlat8, _MinLight);\n    u_xlat8 = min(u_xlat12, u_xlat8);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4.x = u_xlat4.x * u_xlat2.y;\n    u_xlat4.x = u_xlat2.x * u_xlat8 + u_xlat4.x;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORDSS0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = u_xlat4.xxx * u_xlat2.xyz;\n    u_xlat4.xyz = (-u_xlat4.xxx) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat2.x = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat6 = (-_ShnSmooth) + 1.0;\n    u_xlat10 = _ShnRange + _ShnRange;\n    u_xlat14 = u_xlat10 * u_xlat6 + (-u_xlat10);\n    u_xlat6 = u_xlat6 * u_xlat10;\n    u_xlatb6 = u_xlat6==u_xlat10;\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat2.x = u_xlat10 * u_xlat2.x;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = u_xlat2.x * -2.0 + 3.0;\n    u_xlat2.x = u_xlat2.x * u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * u_xlat10;\n    u_xlat2.x = (u_xlatb6) ? 1.0 : u_xlat2.x;\n    u_xlat0.x = u_xlat0.x * u_xlat2.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0],[1,0,["SPOT"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat2;\n    vs_TEXCOORD0 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat1.wwww + u_xlat2;\n    vs_TEXCOORDSS0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    vs_WORLD0.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tint _ShnOverlap;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nfloat u_xlat4;\nmediump float u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat8;\nfloat u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat14;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_WORLD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * vs_NORMAL0.xyz;\n    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);\n    u_xlat4 = max(_Offset, -1.0);\n    u_xlat4 = min(u_xlat4, 1.0);\n    u_xlat8 = u_xlat4 + u_xlat0.x;\n    u_xlat4 = u_xlat4 + 1.0;\n    u_xlat4 = u_xlat8 \/ u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8 = floor(_Steps);\n    u_xlat8 = float(1.0) \/ u_xlat8;\n    u_xlat8 = (_Segmented != 0) ? u_xlat8 : 1.0;\n    u_xlat12 = u_xlat4 \/ u_xlat8;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8 + (-u_xlat8);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8 * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4 = u_xlat4 + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4 \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat10;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb2) ? 0.0 : u_xlat4;\n    u_xlat2.x = (-u_xlat4) + u_xlat10;\n    u_xlat4 = u_xlat6 * u_xlat2.x + u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8 * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat4 = (-u_xlat4) * u_xlat8 + u_xlat12;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat0.zw = vs_TEXCOORD0.xy \/ vs_TEXCOORD0.ww;\n    u_xlat0.xzw = u_xlat0.xzw + vec3(-1.0, 0.5, 0.5);\n    u_xlat8 = texture2D(_LightTexture0, u_xlat0.zw).w;\n    u_xlatb12 = 0.0<vs_TEXCOORD0.z;\n    u_xlat16_1.x = (u_xlatb12) ? 1.0 : 0.0;\n    u_xlat16_1.x = u_xlat8 * u_xlat16_1.x;\n    u_xlat8 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat8 = texture2D(_LightTextureB0, vec2(u_xlat8)).x;\n    u_xlat16_5 = u_xlat8 * u_xlat16_1.x;\n    u_xlat8 = (-u_xlat16_1.x) * u_xlat8 + 1.0;\n    u_xlat12 = u_xlat16_5;\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat2.x = u_xlat4 * u_xlat12 + (-_MinLight);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat4 = u_xlat12 * u_xlat4;\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat2.x = u_xlat2.x \/ u_xlat6;\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat2.x = u_xlat2.x * u_xlat6 + _MinLight;\n    u_xlat4 = u_xlat6 * u_xlat4 + _MinLight;\n    u_xlat2.x = max(u_xlat2.x, _MinLight);\n    u_xlat12 = min(u_xlat12, u_xlat2.x);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.y;\n    u_xlat4 = u_xlat2.x * u_xlat12 + u_xlat4;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORDSS0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat2.xyz;\n    u_xlat2.xyz = (-vec3(u_xlat4)) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat4 = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat12 = (-_ShnSmooth) + 1.0;\n    u_xlat14 = _ShnRange + _ShnRange;\n    u_xlat15 = u_xlat14 * u_xlat12 + (-u_xlat14);\n    u_xlat12 = u_xlat12 * u_xlat14;\n    u_xlatb12 = u_xlat12==u_xlat14;\n    u_xlat14 = float(1.0) \/ u_xlat15;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb12) ? 1.0 : u_xlat4;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat4 = (_ShnOverlap != 0) ? 0.0 : 1.0;\n    u_xlat4 = (-u_xlat8) * u_xlat4 + 1.0;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0],[1,0,["POINT_COOKIE"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2.xyz = u_xlat1.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat1.xxx + u_xlat2.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat1.zzz + u_xlat2.xyz;\n    vs_TEXCOORD0.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat1.www + u_xlat1.xyz;\n    vs_TEXCOORDSS0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    vs_WORLD0.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tint _ShnOverlap;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform highp sampler2D _LightTextureB0;\nuniform highp samplerCube _LightTexture0;\nuniform lowp sampler2D _MainTex;\nvarying highp vec3 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nfloat u_xlat4;\nfloat u_xlat6;\nfloat u_xlat8;\nfloat u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat14;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_WORLD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * vs_NORMAL0.xyz;\n    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);\n    u_xlat4 = max(_Offset, -1.0);\n    u_xlat4 = min(u_xlat4, 1.0);\n    u_xlat8 = u_xlat4 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4 = u_xlat4 + 1.0;\n    u_xlat4 = u_xlat8 \/ u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8 = floor(_Steps);\n    u_xlat8 = float(1.0) \/ u_xlat8;\n    u_xlat8 = (_Segmented != 0) ? u_xlat8 : 1.0;\n    u_xlat12 = u_xlat4 \/ u_xlat8;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8 + (-u_xlat8);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8 * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4 = u_xlat4 + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4 \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat10;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb2) ? 0.0 : u_xlat4;\n    u_xlat2.x = (-u_xlat4) + u_xlat10;\n    u_xlat4 = u_xlat6 * u_xlat2.x + u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8 * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat4 = (-u_xlat4) * u_xlat8 + u_xlat12;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat8 = texture2D(_LightTextureB0, vec2(u_xlat8)).x;\n    u_xlat12 = textureCube(_LightTexture0, vs_TEXCOORD0.xyz).w;\n    u_xlat2.x = u_xlat12 * u_xlat8;\n    u_xlat8 = (-u_xlat8) * u_xlat12 + 1.0;\n    u_xlat2.x = u_xlat2.x;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat12 = u_xlat4 * u_xlat2.x + (-_MinLight);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat2.x = max(_MaxLight, _MinLight);\n    u_xlat6 = u_xlat2.x + (-_MinLight);\n    u_xlat2.x = u_xlat2.x + _Lumin;\n    u_xlat12 = u_xlat12 \/ u_xlat6;\n    u_xlat6 = u_xlat2.x + (-_MinLight);\n    u_xlat12 = u_xlat12 * u_xlat6 + _MinLight;\n    u_xlat4 = u_xlat6 * u_xlat4 + _MinLight;\n    u_xlat12 = max(u_xlat12, _MinLight);\n    u_xlat12 = min(u_xlat2.x, u_xlat12);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.y;\n    u_xlat4 = u_xlat2.x * u_xlat12 + u_xlat4;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORDSS0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat2.xyz;\n    u_xlat2.xyz = (-vec3(u_xlat4)) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat4 = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat12 = (-_ShnSmooth) + 1.0;\n    u_xlat14 = _ShnRange + _ShnRange;\n    u_xlat15 = u_xlat14 * u_xlat12 + (-u_xlat14);\n    u_xlat12 = u_xlat12 * u_xlat14;\n    u_xlatb12 = u_xlat12==u_xlat14;\n    u_xlat14 = float(1.0) \/ u_xlat15;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb12) ? 1.0 : u_xlat4;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat4 = (_ShnOverlap != 0) ? 0.0 : 1.0;\n    u_xlat4 = (-u_xlat8) * u_xlat4 + 1.0;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0],[1,0,["DIRECTIONAL_COOKIE"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat2.xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat1.xy;\n    vs_TEXCOORD0.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat1.xy;\n    vs_TEXCOORDSS0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    vs_WORLD0.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tint _ShnOverlap;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform highp sampler2D _LightTexture0;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nfloat u_xlat4;\nfloat u_xlat6;\nfloat u_xlat8;\nfloat u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat14;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_WORLD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * vs_NORMAL0.xyz;\n    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);\n    u_xlat4 = max(_Offset, -1.0);\n    u_xlat4 = min(u_xlat4, 1.0);\n    u_xlat8 = u_xlat4 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4 = u_xlat4 + 1.0;\n    u_xlat4 = u_xlat8 \/ u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8 = floor(_Steps);\n    u_xlat8 = float(1.0) \/ u_xlat8;\n    u_xlat8 = (_Segmented != 0) ? u_xlat8 : 1.0;\n    u_xlat12 = u_xlat4 \/ u_xlat8;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8 + (-u_xlat8);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8 * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4 = u_xlat4 + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4 \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat10;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb2) ? 0.0 : u_xlat4;\n    u_xlat2.x = (-u_xlat4) + u_xlat10;\n    u_xlat4 = u_xlat6 * u_xlat2.x + u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8 * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat4 = (-u_xlat4) * u_xlat8 + u_xlat12;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8 = texture2D(_LightTexture0, vs_TEXCOORD0.xy).w;\n    u_xlat12 = u_xlat8;\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat8 = (-u_xlat8) + 1.0;\n    u_xlat2.x = u_xlat4 * u_xlat12 + (-_MinLight);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat4 = u_xlat12 * u_xlat4;\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat2.x = u_xlat2.x \/ u_xlat6;\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat2.x = u_xlat2.x * u_xlat6 + _MinLight;\n    u_xlat4 = u_xlat6 * u_xlat4 + _MinLight;\n    u_xlat2.x = max(u_xlat2.x, _MinLight);\n    u_xlat12 = min(u_xlat12, u_xlat2.x);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.y;\n    u_xlat4 = u_xlat2.x * u_xlat12 + u_xlat4;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORDSS0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat2.xyz;\n    u_xlat2.xyz = (-vec3(u_xlat4)) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat4 = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat12 = (-_ShnSmooth) + 1.0;\n    u_xlat14 = _ShnRange + _ShnRange;\n    u_xlat15 = u_xlat14 * u_xlat12 + (-u_xlat14);\n    u_xlat12 = u_xlat12 * u_xlat14;\n    u_xlatb12 = u_xlat12==u_xlat14;\n    u_xlat14 = float(1.0) \/ u_xlat15;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb12) ? 1.0 : u_xlat4;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat4 = (_ShnOverlap != 0) ? 0.0 : 1.0;\n    u_xlat4 = (-u_xlat8) * u_xlat4 + 1.0;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0],[1,0,["SHADOWS_DEPTH","SPOT"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToShadow[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToLight[1];\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToLight[2] * u_xlat1.zzzz + u_xlat2;\n    vs_TEXCOORD0 = hlslcc_mtx4x4unity_WorldToLight[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_WorldToShadow[1];\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_WorldToShadow[2] * u_xlat1.zzzz + u_xlat2;\n    vs_TEXCOORD1 = hlslcc_mtx4x4unity_WorldToShadow[3] * u_xlat1.wwww + u_xlat2;\n    vs_TEXCOORDSS0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    vs_WORLD0.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightShadowData;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tint _ShnOverlap;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform highp sampler2D _LightTexture0;\nuniform highp sampler2D _LightTextureB0;\nuniform highp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nfloat u_xlat4;\nmediump float u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat8;\nbool u_xlatb8;\nmediump float u_xlat16_9;\nfloat u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat14;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_WORLD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * vs_NORMAL0.xyz;\n    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);\n    u_xlat4 = max(_Offset, -1.0);\n    u_xlat4 = min(u_xlat4, 1.0);\n    u_xlat8 = u_xlat4 + u_xlat0.x;\n    u_xlat4 = u_xlat4 + 1.0;\n    u_xlat4 = u_xlat8 \/ u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8 = floor(_Steps);\n    u_xlat8 = float(1.0) \/ u_xlat8;\n    u_xlat8 = (_Segmented != 0) ? u_xlat8 : 1.0;\n    u_xlat12 = u_xlat4 \/ u_xlat8;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8 + (-u_xlat8);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8 * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4 = u_xlat4 + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4 \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat10;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb2) ? 0.0 : u_xlat4;\n    u_xlat2.x = (-u_xlat4) + u_xlat10;\n    u_xlat4 = u_xlat6 * u_xlat2.x + u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8 * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat4 = (-u_xlat4) * u_xlat8 + u_xlat12;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat0.zw = vs_TEXCOORD0.xy \/ vs_TEXCOORD0.ww;\n    u_xlat0.xzw = u_xlat0.xzw + vec3(-1.0, 0.5, 0.5);\n    u_xlat8 = texture2D(_LightTexture0, u_xlat0.zw).w;\n    u_xlatb12 = 0.0<vs_TEXCOORD0.z;\n    u_xlat16_1.x = (u_xlatb12) ? 1.0 : 0.0;\n    u_xlat16_1.x = u_xlat8 * u_xlat16_1.x;\n    u_xlat8 = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat8 = texture2D(_LightTextureB0, vec2(u_xlat8)).x;\n    u_xlat16_1.x = u_xlat8 * u_xlat16_1.x;\n    u_xlat2.xyz = vs_TEXCOORD1.xyz \/ vs_TEXCOORD1.www;\n    u_xlat8 = texture2D(_ShadowMapTexture, u_xlat2.xy).x;\n    u_xlatb8 = u_xlat8<u_xlat2.z;\n    u_xlat16_5 = (u_xlatb8) ? _LightShadowData.x : 1.0;\n    u_xlat16_9 = u_xlat16_5 * u_xlat16_1.x;\n    u_xlat8 = (-u_xlat16_1.x) * u_xlat16_5 + 1.0;\n    u_xlat12 = u_xlat16_9;\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat2.x = u_xlat4 * u_xlat12 + (-_MinLight);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat4 = u_xlat12 * u_xlat4;\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat2.x = u_xlat2.x \/ u_xlat6;\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat2.x = u_xlat2.x * u_xlat6 + _MinLight;\n    u_xlat4 = u_xlat6 * u_xlat4 + _MinLight;\n    u_xlat2.x = max(u_xlat2.x, _MinLight);\n    u_xlat12 = min(u_xlat12, u_xlat2.x);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.y;\n    u_xlat4 = u_xlat2.x * u_xlat12 + u_xlat4;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORDSS0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat2.xyz;\n    u_xlat2.xyz = (-vec3(u_xlat4)) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat4 = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat12 = (-_ShnSmooth) + 1.0;\n    u_xlat14 = _ShnRange + _ShnRange;\n    u_xlat15 = u_xlat14 * u_xlat12 + (-u_xlat14);\n    u_xlat12 = u_xlat12 * u_xlat14;\n    u_xlatb12 = u_xlat12==u_xlat14;\n    u_xlat14 = float(1.0) \/ u_xlat15;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb12) ? 1.0 : u_xlat4;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat4 = (_ShnOverlap != 0) ? 0.0 : 1.0;\n    u_xlat4 = (-u_xlat8) * u_xlat4 + 1.0;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0],[1,0,["DIRECTIONAL","SHADOWS_SCREEN"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat9 = u_xlat1.y * _ProjectionParams.x;\n    u_xlat2.w = u_xlat9 * 0.5;\n    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;\n    vs_TEXCOORD1.zw = u_xlat1.zw;\n    gl_Position = u_xlat1;\n    vs_TEXCOORDSS0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_WORLD0.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tint _ShnOverlap;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nfloat u_xlat4;\nfloat u_xlat6;\nvec2 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat14;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_WORLD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * vs_NORMAL0.xyz;\n    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);\n    u_xlat4 = max(_Offset, -1.0);\n    u_xlat4 = min(u_xlat4, 1.0);\n    u_xlat8.x = u_xlat4 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4 = u_xlat4 + 1.0;\n    u_xlat4 = u_xlat8.x \/ u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.x = floor(_Steps);\n    u_xlat8.x = float(1.0) \/ u_xlat8.x;\n    u_xlat8.x = (_Segmented != 0) ? u_xlat8.x : 1.0;\n    u_xlat12 = u_xlat4 \/ u_xlat8.x;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8.x + (-u_xlat8.x);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8.x * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4 = u_xlat4 + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4 \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat10;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb2) ? 0.0 : u_xlat4;\n    u_xlat2.x = (-u_xlat4) + u_xlat10;\n    u_xlat4 = u_xlat6 * u_xlat2.x + u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8.x * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat4 = (-u_xlat4) * u_xlat8.x + u_xlat12;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD1.xy \/ vs_TEXCOORD1.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat12 = u_xlat10_8;\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat8.x = (-u_xlat10_8) + 1.0;\n    u_xlat2.x = u_xlat4 * u_xlat12 + (-_MinLight);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat4 = u_xlat12 * u_xlat4;\n    u_xlat12 = max(_MaxLight, _MinLight);\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat12 = u_xlat12 + _Lumin;\n    u_xlat2.x = u_xlat2.x \/ u_xlat6;\n    u_xlat6 = u_xlat12 + (-_MinLight);\n    u_xlat2.x = u_xlat2.x * u_xlat6 + _MinLight;\n    u_xlat4 = u_xlat6 * u_xlat4 + _MinLight;\n    u_xlat2.x = max(u_xlat2.x, _MinLight);\n    u_xlat12 = min(u_xlat12, u_xlat2.x);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.y;\n    u_xlat4 = u_xlat2.x * u_xlat12 + u_xlat4;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORDSS0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat2.xyz;\n    u_xlat2.xyz = (-vec3(u_xlat4)) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat4 = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat12 = (-_ShnSmooth) + 1.0;\n    u_xlat14 = _ShnRange + _ShnRange;\n    u_xlat15 = u_xlat14 * u_xlat12 + (-u_xlat14);\n    u_xlat12 = u_xlat12 * u_xlat14;\n    u_xlatb12 = u_xlat12==u_xlat14;\n    u_xlat14 = float(1.0) \/ u_xlat15;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb12) ? 1.0 : u_xlat4;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat4 = (_ShnOverlap != 0) ? 0.0 : 1.0;\n    u_xlat4 = (-u_xlat8.x) * u_xlat4 + 1.0;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0],[1,0,["DIRECTIONAL_COOKIE","SHADOWS_SCREEN"],"#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\nvarying highp vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nfloat u_xlat9;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2.xy = u_xlat1.yy * hlslcc_mtx4x4unity_WorldToLight[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[0].xy * u_xlat1.xx + u_xlat2.xy;\n    u_xlat1.xy = hlslcc_mtx4x4unity_WorldToLight[2].xy * u_xlat1.zz + u_xlat1.xy;\n    vs_TEXCOORD0.xy = hlslcc_mtx4x4unity_WorldToLight[3].xy * u_xlat1.ww + u_xlat1.xy;\n    vs_TEXCOORDSS0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat9 = u_xlat1.y * _ProjectionParams.x;\n    u_xlat2.w = u_xlat9 * 0.5;\n    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);\n    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;\n    vs_TEXCOORD1.zw = u_xlat1.zw;\n    gl_Position = u_xlat1;\n    vs_WORLD0.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = (-u_xlat0.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat9 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat9 = inversesqrt(u_xlat9);\n    u_xlat0.xyz = vec3(u_xlat9) * u_xlat0.xyz;\n    vs_NORMAL0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 _LightColor0;\nuniform \tvec4 _Color;\nuniform \tfloat _AmbientCol;\nuniform \tfloat _ColIntense;\nuniform \tfloat _ColBright;\nuniform \tint _Segmented;\nuniform \tfloat _Steps;\nuniform \tfloat _StpSmooth;\nuniform \tfloat _Offset;\nuniform \tint _Clipped;\nuniform \tfloat _MinLight;\nuniform \tfloat _MaxLight;\nuniform \tfloat _Lumin;\nuniform \tvec4 _ShnColor;\nuniform \tint _ShnOverlap;\nuniform \tfloat _ShnIntense;\nuniform \tfloat _ShnRange;\nuniform \tfloat _ShnSmooth;\nuniform highp sampler2D _LightTexture0;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORDSS0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec3 vs_WORLD0;\nvarying mediump vec3 vs_NORMAL0;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nint u_xlati2;\nbool u_xlatb2;\nvec3 u_xlat3;\nlowp vec3 u_xlat10_3;\nfloat u_xlat4;\nfloat u_xlat6;\nvec2 u_xlat8;\nlowp float u_xlat10_8;\nfloat u_xlat10;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat14;\nfloat u_xlat15;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_WORLD0.xyz) + _WorldSpaceLightPos0.xyz;\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    u_xlat16_1.x = dot(vs_NORMAL0.xyz, vs_NORMAL0.xyz);\n    u_xlat16_1.x = inversesqrt(u_xlat16_1.x);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * vs_NORMAL0.xyz;\n    u_xlat0.x = dot(u_xlat16_1.xyz, u_xlat0.xyz);\n    u_xlat4 = max(_Offset, -1.0);\n    u_xlat4 = min(u_xlat4, 1.0);\n    u_xlat8.x = u_xlat4 + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x + -1.0;\n    u_xlat4 = u_xlat4 + 1.0;\n    u_xlat4 = u_xlat8.x \/ u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.x = floor(_Steps);\n    u_xlat8.x = float(1.0) \/ u_xlat8.x;\n    u_xlat8.x = (_Segmented != 0) ? u_xlat8.x : 1.0;\n    u_xlat12 = u_xlat4 \/ u_xlat8.x;\n    u_xlat12 = ceil(u_xlat12);\n    u_xlat2.x = u_xlat12 * u_xlat8.x + (-u_xlat8.x);\n    u_xlat6 = (_Segmented != 0) ? _StpSmooth : 1.0;\n    u_xlat10 = u_xlat8.x * u_xlat6 + u_xlat2.x;\n    u_xlat6 = u_xlat6 + 0.340000004;\n    u_xlat6 = u_xlat6 * 4.69999981;\n    u_xlat6 = 2.0 \/ u_xlat6;\n    u_xlat6 = (-u_xlat6) + 1.29999995;\n    u_xlat14 = (-u_xlat10) + u_xlat2.x;\n    u_xlatb2 = u_xlat2.x==u_xlat10;\n    u_xlat4 = u_xlat4 + (-u_xlat10);\n    u_xlat10 = float(1.0) \/ u_xlat14;\n    u_xlat14 = u_xlat4 \/ u_xlat14;\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat10;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat10 = (u_xlatb2) ? 0.0 : u_xlat14;\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb2) ? 0.0 : u_xlat4;\n    u_xlat2.x = (-u_xlat4) + u_xlat10;\n    u_xlat4 = u_xlat6 * u_xlat2.x + u_xlat4;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlati2 = int(u_xlat12);\n    u_xlat12 = u_xlat8.x * u_xlat12;\n    u_xlatb2 = u_xlati2==1;\n    u_xlat6 = _Offset + -1.0;\n    u_xlat6 = u_xlat6 * 10.0;\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat2.x = (u_xlatb2) ? u_xlat6 : 1.0;\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat4 = (-u_xlat4) * u_xlat8.x + u_xlat12;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat8.xy = vs_TEXCOORD1.xy \/ vs_TEXCOORD1.ww;\n    u_xlat10_8 = texture2D(_ShadowMapTexture, u_xlat8.xy).x;\n    u_xlat12 = texture2D(_LightTexture0, vs_TEXCOORD0.xy).w;\n    u_xlat2.x = u_xlat10_8 * u_xlat12;\n    u_xlat8.x = (-u_xlat12) * u_xlat10_8 + 1.0;\n    u_xlat2.x = u_xlat2.x;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat12 = u_xlat4 * u_xlat2.x + (-_MinLight);\n    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.x;\n    u_xlat2.x = max(_MaxLight, _MinLight);\n    u_xlat6 = u_xlat2.x + (-_MinLight);\n    u_xlat2.x = u_xlat2.x + _Lumin;\n    u_xlat12 = u_xlat12 \/ u_xlat6;\n    u_xlat6 = u_xlat2.x + (-_MinLight);\n    u_xlat12 = u_xlat12 * u_xlat6 + _MinLight;\n    u_xlat4 = u_xlat6 * u_xlat4 + _MinLight;\n    u_xlat12 = max(u_xlat12, _MinLight);\n    u_xlat12 = min(u_xlat2.x, u_xlat12);\n    u_xlat2.xy = (int(_Clipped) != 0) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n    u_xlat4 = u_xlat4 * u_xlat2.y;\n    u_xlat4 = u_xlat2.x * u_xlat12 + u_xlat4;\n    u_xlat2.xyz = _LightColor0.xyz + (-_Color.xyz);\n    u_xlat2.xyz = vec3(_AmbientCol) * u_xlat2.xyz + _Color.xyz;\n    u_xlat10_3.xyz = texture2D(_MainTex, vs_TEXCOORDSS0.xy).xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat10_3.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * vec3(vec3(_ColIntense, _ColIntense, _ColIntense)) + vec3(vec3(_ColBright, _ColBright, _ColBright));\n    u_xlat3.xyz = vec3(u_xlat4) * u_xlat2.xyz;\n    u_xlat2.xyz = (-vec3(u_xlat4)) * u_xlat2.xyz + _ShnColor.xyz;\n    u_xlat4 = (-_ShnRange) * 2.0 + abs(u_xlat0.x);\n    u_xlat0.x = _ShnRange * 2.0 + -abs(u_xlat0.x);\n    u_xlatb0 = u_xlat0.x>=0.0;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * _ShnIntense;\n    u_xlat12 = (-_ShnSmooth) + 1.0;\n    u_xlat14 = _ShnRange + _ShnRange;\n    u_xlat15 = u_xlat14 * u_xlat12 + (-u_xlat14);\n    u_xlat12 = u_xlat12 * u_xlat14;\n    u_xlatb12 = u_xlat12==u_xlat14;\n    u_xlat14 = float(1.0) \/ u_xlat15;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);\n    u_xlat14 = u_xlat4 * -2.0 + 3.0;\n    u_xlat4 = u_xlat4 * u_xlat4;\n    u_xlat4 = u_xlat4 * u_xlat14;\n    u_xlat4 = (u_xlatb12) ? 1.0 : u_xlat4;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat4 = (_ShnOverlap != 0) ? 0.0 : 1.0;\n    u_xlat4 = (-u_xlat8.x) * u_xlat4 + 1.0;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n",0]],[],0],[2,0,"",0,1,[0,null],[0,null],[0,null],[[1,null],[0,null],[0,null]],[[1,null],[0,null],[0,null]],[15,null],[0,null],[0,null],[0,null],[0,null],[0,null],[[0,null],[0,null],[0,null],[0,null]],[[0,null],[0,null],[0,null],[0,null]],[[0,null],[0,null],[0,null],[0,null]],[],[],[],[],[],0]],[[0,68,"SHADOWCASTER"]],[["_MainTex",4,0,0,0,0,"white"],["_Color",0,1,1,1,1,""],["_ColIntense",3,1,0,3,0,""],["_ColBright",3,0,-1,1,0,""],["_AmbientCol",3,0,0,1,0,""],["_Segmented",2,1,0,0,0,""],["_Steps",3,3,1,25,0,""],["_StpSmooth",3,0,0,1,0,""],["_Offset",3,0,-1,1.10000002384186,0,""],["_Clipped",2,0,0,0,0,""],["_MinLight",3,0,0,1,0,""],["_MaxLight",3,1,0,1,0,""],["_Lumin",3,0,0,2,0,""],["_ShnColor",0,1,1,0,1,""],["_ShnOverlap",2,0,0,0,0,""],["_ShnIntense",3,0,0,1,0,""],["_ShnRange",3,0.150000005960464,0,1,0,""],["_ShnSmooth",3,0,0,1,0,""]],null,null,0,0]}